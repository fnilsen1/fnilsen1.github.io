import re

# Initial cube state
initial_cube_state = [
    'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ', 'ðŸŸ§', 'ðŸŸ§', 'ðŸŸ§', 'ðŸŸ§', 'ðŸŸ§', 'ðŸŸ§', 'ðŸŸ§', 'ðŸŸ§', 
    'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 
    'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨'
]

# Function to print the cube
def print_cube(cube):
    # White face
    print("      ", end="")
    print("".join(cube[0:3]))
    print("      ", end="")
    print(cube[3], end="")
    print('â¬œ', end="")
    print(cube[4])
    print("      ", end="")
    print("".join(cube[5:8]))

    # Orange, Green, Red, Blue faces
    print("".join(cube[8:11]), end="")
    print("".join(cube[16:19]), end="")
    print("".join(cube[24:27]), end="")
    print("".join(cube[32:35]))
    
    print(cube[11],  end="")
    print('ðŸŸ§',  end="")
    print(cube[12],  end="")
    print(cube[19],  end="")
    print('ðŸŸ©',  end="")
    print(cube[20],  end="")
    print(cube[27],  end="")
    print('ðŸŸ¥',  end="")
    print(cube[28],  end="")
    print(cube[35],  end="")
    print('ðŸŸ¦',  end="")
    print(cube[36])

    print("".join(cube[13:16]), end="")
    print("".join(cube[21:24]), end="")
    print("".join(cube[29:32]), end="")
    print("".join(cube[37:40]))

    # Yellow face
    print("      ", end="")
    print("".join(cube[40:43]))
    print("      ", end="")
    print(cube[43], end="")
    print('ðŸŸ¨', end="")
    print(cube[44])
    print("      ", end="")
    print("".join(cube[45:48]))

# Swap elements based on given swaps
def swap_elements(cube, swaps):
    for swap in swaps:
        if len(swap) == 2:
            cube[swap[0]-1], cube[swap[1]-1] = cube[swap[1]-1], cube[swap[0]-1]
        else:
            temp = cube[swap[-1]-1]
            for i in range(len(swap) - 1, 0, -1):
                cube[swap[i]-1] = cube[swap[i - 1]-1]
            cube[swap[0]-1] = temp

# Parse the swaps data
def parse_data(data):
    pattern = re.compile(r'\(([^)]+)\)')
    parsed_data = []
    
    for swaps, value in data:
        if swaps:
            swaps_list = pattern.findall(swaps)
            swaps_list = [tuple(map(int, swap.split(','))) for swap in swaps_list]
        else:
            swaps_list = []
        parsed_data.append((swaps_list, value))
    
    return parsed_data

# Data input
data = [
    [ (), 663552 ],
    [ "(16,32)(22,38)(23,39)(41,48)(42,47)", 1990656 ],
    [ "(8,41,48)(16,32,25)(19,22,38)", 1327104 ], 
    [ "(23,31,39)(42,45,47)", 10616832 ],
    [ "(16,32)(22,38)(31,39)(41,48)(45,47)", 31850496 ], 
    [ "(8,41,48)(16,32,25)(19,22,38)(23,31,39)(42,45,47)", 21233664 ],
    [ "(15,23)(31,39)(42,44)(45,47)", 23887872 ], 
    [ "(15,23,31,39)(16,32)(22,38)(41,48)(42,45,47,44)", 71663616 ], 
    [ "(8,41,48)(15,23)(16,32,25)(19,22,38)(31,39)(42,44)(45,47)", 47775744 ],
    [ "(5,7)(15,23,31,39)(18,26)(42,45,47,44)", 10616832 ],
    [ "(5,7)(15,23)(16,32)(18,26)(22,38)(31,39)(41,48)(42,44)(45,47)", 31850496 ], 
    [ "(5,7)(8,41,48)(15,23,31,39)(16,32,25)(18,26)(19,22,38)(42,45,47,44)", 21233664 ], 
    [ "(2,4)(5,7)(10,34)(15,23)(18,26)(31,39)(42,44)(45,47)", 663552 ], 
    [ "(2,4)(5,7)(10,34)(15,23,31,39)(16,32)(18,26)(22,38)(41,48)(42,45,47,44)", 1990656 ], 
    [ "(2,4)(5,7)(8,41,48)(10,34)(15,23)(16,32,25)(18,26)(19,22,38)(31,39)(42,44)(45,47)", 1327104 ], 
    [ "(24,32)(30,38)(31,39)(43,48)(45,47)", 169869312 ],
    [ "(16,24,32)(22,30,38)(23,31,39)(41,43,48)(42,45,47)", 509607936 ], 
    [ "(8,41,43,48)(16,24,32,25)(19,22,30,38)(31,39)(45,47)", 339738624 ],
    [ "(23,39)(24,32)(30,38)(42,47)(43,48)", 10616832 ], 
    [ "(16,24,32)(22,30,38)(41,43,48)", 31850496 ],
    [ "(8,41,43,48)(16,24,32,25)(19,22,30,38)(23,39)(42,47)", 21233664 ], 
    [ "(15,23,31,39)(24,32)(30,38)(42,45,47,44)(43,48)", 382205952 ], 
    [ "(15,23)(16,24,32)(22,30,38)(31,39)(41,43,48)(42,44)(45,47)", 1146617856 ], 
    [ "(8,41,43,48)(15,23,31,39)(16,24,32,25)(19,22,30,38)(42,45,47,44)", 764411904 ], 
    [ "(5,7)(15,23)(18,26)(24,32)(30,38)(31,39)(42,44)(43,48)(45,47)", 169869312 ], 
    [ "(5,7)(15,23,31,39)(16,24,32)(18,26)(22,30,38)(41,43,48)(42,45,47,44)", 509607936 ], 
    [ "(5,7)(8,41,43,48)(15,23)(16,24,32,25)(18,26)(19,22,30,38)(31,39)(42,44)(45,47)", 339738624 ], 
    [ "(2,4)(5,7)(10,34)(15,23,31,39)(18,26)(24,32)(30,38)(42,45,47,44)(43,48)", 10616832 ], 
    [ "(2,4)(5,7)(10,34)(15,23)(16,24,32)(18,26)(22,30,38)(31,39)(41,43,48)(42,44)(45,47)", 31850496 ], 
    [ "(2,4)(5,7)(8,41,43,48)(10,34)(15,23,31,39)(16,24,32,25)(18,26)(19,22,30,38)(42,45,47,44)", 21233664 ], 
    [ "(14,22,30,38)(16,24,32,40)(31,39)(41,43,48,46)(45,47)", 127401984 ], 
    [ "(14,22)(16,40)(23,31,39)(24,32)(30,38)(41,46)(42,45,47)(43,48)", 127401984 ], 
    [ "(8,43,48,46,41)(14,22,19,30,38)(16,25,24,32,40)(23,31,39)(42,45,47)", 254803968 ], 
    [ "(8,43,48)(14,22)(16,40)(19,30,38)(24,32,25)(31,39)(41,46)(45,47)", 254803968 ], 
    [ "(14,22,30,38)(16,24,32,40)(23,39)(41,43,48,46)(42,47)", 7962624 ],
    [ "(14,22)(16,40)(24,32)(30,38)(41,46)(43,48)", 7962624 ], 
    [ "(8,43,48,46,41)(14,22,19,30,38)(16,25,24,32,40)", 15925248 ], 
    [ "(8,43,48)(14,22)(16,40)(19,30,38)(23,39)(24,32,25)(41,46)(42,47)", 15925248 ], 
    [ "(14,22,30,38)(15,23,31,39)(16,24,32,40)(41,43,48,46)(42,45,47,44)", 286654464 ], 
    [ "(14,22)(15,23)(16,40)(24,32)(30,38)(31,39)(41,46)(42,44)(43,48)(45,47)", 286654464 ], 
    [ "(8,43,48,46,41)(14,22,19,30,38)(15,23)(16,25,24,32,40)(31,39)(42,44)(45,47)", 573308928 ], 
    [ "(8,43,48)(14,22)(15,23,31,39)(16,40)(19,30,38)(24,32,25)(41,46)(42,45,47,44)", 573308928 ], 
    [ "(5,7)(14,22,30,38)(15,23)(16,24,32,40)(18,26)(31,39)(41,43,48,46)(42,44)(45,47)", 127401984 ], 
    [ "(5,7)(14,22)(15,23,31,39)(16,40)(18,26)(24,32)(30,38)(41,46)(42,45,47,44)(43,48)", 127401984 ], 
    [ "(5,7)(8,43,48,46,41)(14,22,19,30,38)(15,23,31,39)(16,25,24,32,40)(18,26)(42,45,47,44)", 254803968 ], 
    [ "(5,7)(8,43,48)(14,22)(15,23)(16,40)(18,26)(19,30,38)(24,32,25)(31,39)(41,46)(42,44)(45,47)", 254803968 ], 
    [ "(2,4)(5,7)(10,34)(14,22,30,38)(15,23,31,39)(16,24,32,40)(18,26)(41,43,48,46)(42,45,47,44)", 7962624 ], 
    [ "(2,4)(5,7)(10,34)(14,22)(15,23)(16,40)(18,26)(24,32)(30,38)(31,39)(41,46)(42,44)(43,48)(45,47)", 7962624 ], 
    [ "(2,4)(5,7)(8,43,48,46,41)(10,34)(14,22,19,30,38)(15,23)(16,25,24,32,40)(18,26)(31,39)(42,44)(45,47)", 15925248 ], 
    [ "(2,4)(5,7)(8,43,48)(10,34)(14,22)(15,23,31,39)(16,40)(18,26)(19,30,38)(24,32,25)(41,46)(42,45,47,44)", 15925248 ], 
    [ "(8,41,43,48,46)(14,19,22,30,38)(16,24,32,40,25)", 15925248 ], 
    [ "(8,41,46)(14,19,22)(16,40,25)(23,39)(24,32)(30,38)(42,47)(43,48)", 15925248 ], 
    [ "(8,43,48,46)(14,19,30,38)(23,39)(24,32,40,25)(42,47)", 31850496 ], 
    [ "(8,43,48,41,46)(14,19,30,38,22)(16,40,25,24,32)", 31850496 ], 
    [ "(8,41,43,48,46)(14,19,22,30,38)(16,24,32,40,25)(23,31,39)(42,45,47)", 254803968 ], 
    [ "(8,41,46)(14,19,22)(16,40,25)(24,32)(30,38)(31,39)(43,48)(45,47)", 254803968 ], 
    [ "(8,43,48,46)(14,19,30,38)(24,32,40,25)(31,39)(45,47)", 509607936 ], 
    [ "(8,43,48,41,46)(14,19,30,38,22)(16,40,25,24,32)(23,31,39)(42,45,47)", 509607936 ], 
    [ "(8,41,43,48,46)(14,19,22,30,38)(15,23)(16,24,32,40,25)(31,39)(42,44)(45,47)", 573308928 ], 
    [ "(8,41,46)(14,19,22)(15,23,31,39)(16,40,25)(24,32)(30,38)(42,45,47,44)(43,48)", 573308928 ], 
    [ "(8,43,48,46)(14,19,30,38)(15,23,31,39)(24,32,40,25)(42,45,47,44)", 1146617856 ], 
    [ "(8,43,48,41,46)(14,19,30,38,22)(15,23)(16,40,25,24,32)(31,39)(42,44)(45,47)", 1146617856 ], 
    [ "(5,7)(8,41,43,48,46)(14,19,22,30,38)(15,23,31,39)(16,24,32,40,25)(18,26)(42,45,47,44)", 254803968 ], 
    [ "(5,7)(8,41,46)(14,19,22)(15,23)(16,40,25)(18,26)(24,32)(30,38)(31,39)(42,44)(43,48)(45,47)", 254803968 ], 
    [ "(5,7)(8,43,48,46)(14,19,30,38)(15,23)(18,26)(24,32,40,25)(31,39)(42,44)(45,47)", 509607936 ], 
    [ "(5,7)(8,43,48,41,46)(14,19,30,38,22)(15,23,31,39)(16,40,25,24,32)(18,26)(42,45,47,44)", 509607936 ], 
    [ "(2,4)(5,7)(8,41,43,48,46)(10,34)(14,19,22,30,38)(15,23)(16,24,32,40,25)(18,26)(31,39)(42,44)(45,47)", 15925248 ], 
    [ "(2,4)(5,7)(8,41,46)(10,34)(14,19,22)(15,23,31,39)(16,40,25)(18,26)(24,32)(30,38)(42,45,47,44)(43,48)", 15925248 ], 
    [ "(2,4)(5,7)(8,43,48,46)(10,34)(14,19,30,38)(15,23,31,39)(18,26)(24,32,40,25)(42,45,47,44)", 31850496 ], 
    [ "(2,4)(5,7)(8,43,48,41,46)(10,34)(14,19,30,38,22)(15,23)(16,40,25,24,32)(18,26)(31,39)(42,44)(45,47)", 31850496 ], 
    [ "(6,8)(11,19)(14,22,30,38)(16,24,32,40)(17,25)(41,43,48,46)", 31850496 ], 
    [ "(6,8)(11,19)(14,22)(16,40)(17,25)(23,39)(24,32)(30,38)(41,46)(42,47)(43,48)", 10616832 ], 
    [ "(6,8,43,48,46,41)(11,19,30,38,14,22)(16,17,25,24,32,40)(23,39)(42,47)", 21233664 ], 
    [ "(6,8)(11,19)(14,22,30,38)(16,24,32,40)(17,25)(23,31,39)(41,43,48,46)(42,45,47)", 509607936 ], 
    [ "(6,8)(11,19)(14,22)(16,40)(17,25)(24,32)(30,38)(31,39)(41,46)(43,48)(45,47)", 169869312 ], 
    [ "(6,8,43,48,46,41)(11,19,30,38,14,22)(16,17,25,24,32,40)(31,39)(45,47)", 339738624 ], 
    [ "(6,8)(11,19)(14,22,30,38)(15,23)(16,24,32,40)(17,25)(31,39)(41,43,48,46)(42,44)(45,47)", 1146617856 ], 
    [ "(6,8)(11,19)(14,22)(15,23,31,39)(16,40)(17,25)(24,32)(30,38)(41,46)(42,45,47,44)(43,48)", 382205952 ], 
    [ "(6,8,43,48,46,41)(11,19,30,38,14,22)(15,23,31,39)(16,17,25,24,32,40)(42,45,47,44)", 764411904 ], 
    [ "(5,7)(6,8)(11,19)(14,22,30,38)(15,23,31,39)(16,24,32,40)(17,25)(18,26)(41,43,48,46)(42,45,47,44)", 509607936 ], 
    [ "(5,7)(6,8)(11,19)(14,22)(15,23)(16,40)(17,25)(18,26)(24,32)(30,38)(31,39)(41,46)(42,44)(43,48)(45,47)", 169869312 ], 
    [ "(5,7)(6,8,43,48,46,41)(11,19,30,38,14,22)(15,23)(16,17,25,24,32,40)(18,26)(31,39)(42,44)(45,47)", 339738624 ], 
    [ "(2,4)(5,7)(6,8)(10,34)(11,19)(14,22,30,38)(15,23)(16,24,32,40)(17,25)(18,26)(31,39)(41,43,48,46)(42,44)(45,47)", 31850496 ],
    [ "(2,4)(5,7)(6,8)(10,34)(11,19)(14,22)(15,23,31,39)(16,40)(17,25)(18,26)(24,32)(30,38)(41,46)(42,45,47,44)(43,48)", 10616832 ],
    [ "(2,4)(5,7)(6,8,43,48,46,41)(10,34)(11,19,30,38,14,22)(15,23,31,39)(16,17,25,24,32,40)(18,26)(42,45,47,44)", 21233664 ], 
    [ "(1,3)(6,8)(9,33)(11,19)(14,22,30,38)(16,24,32,40)(17,25)(27,35)(31,39)(41,43,48,46)(45,47)", 31850496 ], 
    [ "(1,3)(6,8)(9,33)(11,19)(14,22)(16,40)(17,25)(23,31,39)(24,32)(27,35)(30,38)(41,46)(42,45,47)(43,48)", 10616832 ], 
    [ "(1,3)(6,8,43,48,46,41)(9,33)(11,19,30,38,14,22)(16,17,25,24,32,40)(23,31,39)(27,35)(42,45,47)", 21233664 ], 
    [ "(1,3)(6,8)(9,33)(11,19)(14,22,30,38)(16,24,32,40)(17,25)(23,39)(27,35)(41,43,48,46)(42,47)", 1990656 ], 
    [ "(1,3)(6,8)(9,33)(11,19)(14,22)(16,40)(17,25)(24,32)(27,35)(30,38)(41,46)(43,48)", 663552 ], 
    [ "(1,3)(6,8,43,48,46,41)(9,33)(11,19,30,38,14,22)(16,17,25,24,32,40)(27,35)", 1327104 ], 
    [ "(1,3)(6,8)(9,33)(11,19)(14,22,30,38)(15,23,31,39)(16,24,32,40)(17,25)(27,35)(41,43,48,46)(42,45,47,44)", 71663616 ], 
    [ "(1,3)(6,8)(9,33)(11,19)(14,22)(15,23)(16,40)(17,25)(24,32)(27,35)(30,38)(31,39)(41,46)(42,44)(43,48)(45,47)", 23887872 ], 
    [ "(1,3)(6,8,43,48,46,41)(9,33)(11,19,30,38,14,22)(15,23)(16,17,25,24,32,40)(27,35)(31,39)(42,44)(45,47)", 47775744 ], 
    [ "(1,3)(5,7)(6,8)(9,33)(11,19)(14,22,30,38)(15,23)(16,24,32,40)(17,25)(18,26)(27,35)(31,39)(41,43,48,46)(42,44)(45,47)", 31850496 ],
    [ "(1,3)(5,7)(6,8)(9,33)(11,19)(14,22)(15,23,31,39)(16,40)(17,25)(18,26)(24,32)(27,35)(30,38)(41,46)(42,45,47,44)(43,48)", 10616832 ], 
    [ "(1,3)(5,7)(6,8,43,48,46,41)(9,33)(11,19,30,38,14,22)(15,23,31,39)(16,17,25,24,32,40)(18,26)(27,35)(42,45,47,44)", 21233664 ],
    [ "(1,3)(2,4)(5,7)(6,8)(9,33)(10,34)(11,19)(14,22,30,38)(15,23,31,39)(16,24,32,40)(17,25)(18,26)(27,35)(41,43,48,46)(42,45,47,44)", 1990656 ],
    [ "(1,3)(2,4)(5,7)(6,8)(9,33)(10,34)(11,19)(14,22)(15,23)(16,40)(17,25)(18,26)(24,32)(27,35)(30,38)(31,39)(41,46)(42,44)(43,48)(45,47)", 663552 ],
    [ "(1,3)(2,4)(5,7)(6,8,43,48,46,41)(9,33)(10,34)(11,19,30,38,14,22)(15,23)(16,17,25,24,32,40)(18,26)(27,35)(31,39)(42,44)(45,47)", 1327104 ]
]   
# Parse the data
parsed_data = parse_data(data)

# Execute swaps and print cube state
for swaps, value in parsed_data:
    # Create a copy of the initial cube state for each swap sequence
    cube_state = initial_cube_state[:]
    
    # Apply swaps if there are any
    if swaps:
        swap_elements(cube_state, swaps)
    
    # Print the cube state
    print(f"After swaps {swaps}:")
    print_cube(cube_state)
    print("\n" + "="*20 + "\n")



